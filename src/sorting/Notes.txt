Insertion Sorting:::
------------------------------------
package com.one.sortings;

public class InsertionSort {

	public static void main(String[] args) {
		
		int[] a = {20,35,-15,7,55,1,-22};
		
		for(int firstUnsortedIndex = 1;firstUnsortedIndex<a.length;firstUnsortedIndex++) {
			int newElement = a[firstUnsortedIndex];
			
			int i;
			
			// this loop searches for the index to insert the newelement
			//into the the sorted array by pushing the elements 
			// in sorted array to the right
			for(i=firstUnsortedIndex;i>0 && a[i-1]>newElement;i--) {
				a[i]= a[i-1]; 
			}
			
			a[i] = newElement;
		}
		
		
		
		for(int i=0;i<a.length;i++) {
			System.out.print(" "+a[i]);
		}
	}
	
}

Shell Sort
---------------------

package com.one.sortings;
public class ShellSort {

	public static void main(String[] args) {
		int[] a = {20,35,-15,7,55,1,-22};
		
		for(int gap=a.length/2;gap>0;gap/=2) {
			
			for(int i=gap;i<a.length;i++) {
				int newEelement = a[i];
				
				int j = i;
				
				while(j>=gap && a[j-gap] > newEelement ) {
					a[j]= a[j-gap];
					j-=gap;
				}
				a[j]= newEelement; 
			}
		}
		
		
		for(int i=0;i<a.length;i++) {
			System.out.print(" "+a[i]);
		}
	}
}



Bubble Sort
--------------------------------------
public class BubbleSort {
	
	public static void sort(int arr[]) {
		int temp;
		for(int i=0;i<arr.length;i++) {
			for(int j=0;j<arr.length-i-1;j++) {
				if(arr[j]>arr[j+1]) {
					temp = arr[j];
					arr[j]= arr[j+1];
					arr[j+1] = temp;
				}
			}
		}
		
		for (int i = 0; i < arr.length; i++) {
			System.out.print(" "+arr[i]);
		}
	}
	
	public static void main(String[] args) {
		
		int[] arr1 = {20,4,8,61,2,64,64,645,7654,86715,6434,343,6,6794,6968964,34};
		sort(arr1);
	}
}

Counting Sort
---------------------------------------
package com.one.sortings;

public class CountingSort {

	public static void main(String[] args) {
		int[] a = {2,5,9,8,2,8,2,10,4,3};
		countingSort(a, 1, 10);
		for(int i=0;i<a.length;i++) {
			System.out.println(" "+a[i]);
		}
	}
	
	public static void countingSort(int[] a,int min,int max) {
		
		int[] temp = new int[(max-min)+1];
		
		for(int i=0;i<a.length;i++) {
			temp[a[i]-min]++;
		}
		
		int j = 0;
		for(int i=min;i<=max;i++) {
			while(temp[i-min]>0) {
				a[j++] = i;
				temp[i-min]--;
			}
		}
	}
}

Insertion Recursive Sort
--------------------------------------------
package com.one.sortings;

public class InsertionReccursive {

	public static void main(String[] args) {
		
		int[] a = {12,43,564,343,23,131,456};
		insertionSort(a, a.length);
		
		for(int i=0;i<a.length;i++) {
			System.out.println(" "+a[i]);
		}
		
	}
	
	public static void insertionSort(int a[],int numItems) {
		
		if(numItems<2)
			return;
		
		insertionSort(a, numItems-1);
		
		int newElement = a[numItems-1];
		
		int i;
		
		for(i=numItems-1;(i>0 && a[i-1]>newElement);i--) {
			a[i]= a[i-1]; 
		}
		
		a[i]= newElement; 
		
	}
		
	
}

Merge Sort
--------------------------------------

package com.one.sortings;
public class Mergesort {
	
	public static void main(String[] args) {

		int[] a = {20,35,-15,7,55,1,-22};
		mergeSort(a, 0, a.length);
		for(int i=0;i<a.length;i++) {
			System.out.print(" "+a[i]);
		}
	}
	
	//{20,35,-15,7,55,1,-22};
	public static void mergeSort(int[] a,int start,int end) {
		
		
		if(end - start < 2) 
			return;
		
		int mid = (start + end)/2;
		mergeSort(a, start, mid);
		mergeSort(a, mid, end);
		merge(a,start,mid,end);
	}

	//{20,35,-15,7,55,1,-22};
	private static void merge(int[] a, int start, int mid, int end) {
		
		
		// mid is the first index of right array ==> mid-1 is the last element 
		// of left array;
		if(a[mid -1] <= a[mid])
			return;
		
//		// for decending order
//		if(input[mid -1] >= input[mid])
//			return;
		
		int i = start;
		int j = mid;
		int tempIndex = 0;
		
		int[] temp = new int[end-start];
		
		while(i<mid && j<end) {
			temp[tempIndex++] = a[i]<=a[j] ? a[i++] : a[j++];
//			// for decending order
//			temp[tempIndex++] = input[i]>=input[j] ? input[i++] : input[j++];
		}

		// System.arraycopy(src, srcPos, dest, destPos, length);
		System.arraycopy(a, i, a, (start+tempIndex), mid-i);
		System.arraycopy(temp, 0, a, start, tempIndex);
	}
}





/*
 * class Main{
 * 
 * public static void main(String[] args){
 * 
 * int a[] = {12,3,42,234,23,322,2};
 * mergeSort(a,0,a.length);
 * }
 *  public static void mergeSort(int a[],int start,int end){
 * 
 * int mid = (start+end)/2;
 * 
 * if(end-start <2)
 *    return; 
 *    
 * mergeSort(a,0,mid);
 * mergeSort(a,mid+1,end);
 * merge(a,start,mid,end);
 * }
 * 
 * public static void merge(int[] a,int start,int mid,int end){
 * 
 * if(a[mid-1] <= a[mid])
 *   return;
 *   
 * int i = start;
 * int j = mid;
 * int tempIndex = 0;
 * int[] temp = new int[end-start];
 * 
 * while(i<mid && j<end){
 * temp[tempIndex++] = (a[i]<=a[j] ? a[i++] : a[j++]);
 * }
 * 
 * System.arraycopy(a, 0, a, (start+tempIndex), (mid-i));
 * System.arraycopy(temp, 0, a, start, tempIndex);
 * }
 * 
 * }
 * 
 */

Selection Sort
------------------------------

package com.one.sortings;

public class MySelSort {

	// Repeatedly finding the minimum from the remaing subarray
	// for ascending order
	public static void selSort(int a[]) {
		int size = a.length;
		for(int i=0;i<size-1;i++) {
			int min_index = i;
			for(int j=i+1;j<size;j++) { 
				if(a[j] < a[min_index])
					min_index = j;
			}
			int temp = a[min_index];
			a[min_index] = a[i];
			a[i]= temp; 
		}
	}
	
	public static void printArray(int a[]) {
		for(int i=0;i<a.length;i++) {
			System.out.print(a[i]+"  ");
		}
		System.out.println();
	}
	
	public static void main(String[] args) {
		
		int[] a = {4,46,-85,874,-20,11};
		selSort(a);
		printArray(a);
		
	}
	
	
	
}

Quick Sort
--------------------------

package com.one.sortings;

public class QuickSort {

	
	public static void main(String[] args) {
		int[] a = {20,35,-15,7,55,1,-22};
		quickSort(a, 0, a.length);
		for(int i=0;i<a.length;i++) {
			System.out.print(" "+a[i]);
		}
	}

	private static void quickSort(int[] a, int start, int end) {
		// TODO Auto-generated method stub
		
		if(end - start < 2)
			return;
		
		int pivotIndex = partition(a,start,end);
		quickSort(a, start, pivotIndex);
		quickSort(a, pivotIndex+1, end);
		
	}

	private static int partition(int[] a, int start, int end) {
		// we are using first element as pivot
		int pivot = a[start];
		int i = start;
		int j=end;
		
		// i traverses from left
		// j traverses from right
		
		while(i<j) {
			
			// stop when i and j crosses && a[j] >= pivot
			while(i<j && a[--j]>=pivot);
			// Moving the elements lessthan pivot to left
			if(i<j) 
				a[i]= a[j]; 
			
			// stop when i and j crosses && a[i] <= pivot
			while(i<j && a[++i]<=pivot);
			if(i<j)
				a[j] = a[i];
			
		}
		
		a[j] = pivot;
		return j;
	}
}


Radix Sort
------------------------------

package com.one.sortings;

public class RadixSort {

	public static void main(String[] args) {
		int[] ip = {};
		radixSort(ip,10,4);
		for(int i=0;i<ip.length;i++) {
			System.out.println(ip[i]);
		}
	}

	private static void radixSort(int[] ip, int radix, int width) {
		for(int i=0;i<width;i++) {
			radixSingleSort(ip,i,radix);
		}
	}

	private static void radixSingleSort(int[] ip, int position, int radix) {
		int numItems = ip.length;
		int[] countArray = new int[radix];
		// For incrementing the count array
		for(int value:ip) {
			countArray[getDigit(position,value,radix)]++;
		}
		// For Stable sort we are arraning like this
		for(int j=1;j<countArray.length;j++) {
			countArray[j] += countArray[j-1];  
		}
		// For assigning the values to the Temporary array
		int[] temp = new int[numItems];
		for(int k=numItems-1;k>=0;k--) {
			temp[--countArray[getDigit(position, ip[k], radix)]] = ip[k];
		}
		// Lastly copy the sorted array to the original array
		for(int i=0;i<temp.length;i++) {
			ip[i]= temp[i]; 
		}
	}
	
	private static int getDigit(int position, int value, int radix) {
		return value/(int) Math.pow(radix, position) % radix;
	}
}

